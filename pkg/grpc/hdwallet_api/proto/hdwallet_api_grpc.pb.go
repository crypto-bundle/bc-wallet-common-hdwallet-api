// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HdWalletApiClient is the client API for HdWalletApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HdWalletApiClient interface {
	AddNewWallet(ctx context.Context, in *AddNewWalletRequest, opts ...grpc.CallOption) (*AddNewWalletResponse, error)
	GetWalletInfo(ctx context.Context, in *GetWalletInfoRequest, opts ...grpc.CallOption) (*GetWalletInfoResponse, error)
	GetEnabledWallets(ctx context.Context, in *GetEnabledWalletsRequest, opts ...grpc.CallOption) (*GetEnabledWalletsResponse, error)
	GetDerivationAddress(ctx context.Context, in *DerivationAddressRequest, opts ...grpc.CallOption) (*DerivationAddressResponse, error)
	GetDerivationAddressByRange(ctx context.Context, in *DerivationAddressByRangeRequest, opts ...grpc.CallOption) (*DerivationAddressByRangeResponse, error)
	SignTransaction(ctx context.Context, in *SignTransactionRequest, opts ...grpc.CallOption) (*SignTransactionResponse, error)
}

type hdWalletApiClient struct {
	cc grpc.ClientConnInterface
}

func NewHdWalletApiClient(cc grpc.ClientConnInterface) HdWalletApiClient {
	return &hdWalletApiClient{cc}
}

func (c *hdWalletApiClient) AddNewWallet(ctx context.Context, in *AddNewWalletRequest, opts ...grpc.CallOption) (*AddNewWalletResponse, error) {
	out := new(AddNewWalletResponse)
	err := c.cc.Invoke(ctx, "/hdwallet_api.HdWalletApi/AddNewWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hdWalletApiClient) GetWalletInfo(ctx context.Context, in *GetWalletInfoRequest, opts ...grpc.CallOption) (*GetWalletInfoResponse, error) {
	out := new(GetWalletInfoResponse)
	err := c.cc.Invoke(ctx, "/hdwallet_api.HdWalletApi/GetWalletInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hdWalletApiClient) GetEnabledWallets(ctx context.Context, in *GetEnabledWalletsRequest, opts ...grpc.CallOption) (*GetEnabledWalletsResponse, error) {
	out := new(GetEnabledWalletsResponse)
	err := c.cc.Invoke(ctx, "/hdwallet_api.HdWalletApi/GetEnabledWallets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hdWalletApiClient) GetDerivationAddress(ctx context.Context, in *DerivationAddressRequest, opts ...grpc.CallOption) (*DerivationAddressResponse, error) {
	out := new(DerivationAddressResponse)
	err := c.cc.Invoke(ctx, "/hdwallet_api.HdWalletApi/GetDerivationAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hdWalletApiClient) GetDerivationAddressByRange(ctx context.Context, in *DerivationAddressByRangeRequest, opts ...grpc.CallOption) (*DerivationAddressByRangeResponse, error) {
	out := new(DerivationAddressByRangeResponse)
	err := c.cc.Invoke(ctx, "/hdwallet_api.HdWalletApi/GetDerivationAddressByRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hdWalletApiClient) SignTransaction(ctx context.Context, in *SignTransactionRequest, opts ...grpc.CallOption) (*SignTransactionResponse, error) {
	out := new(SignTransactionResponse)
	err := c.cc.Invoke(ctx, "/hdwallet_api.HdWalletApi/SignTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HdWalletApiServer is the server API for HdWalletApi service.
// All implementations must embed UnimplementedHdWalletApiServer
// for forward compatibility
type HdWalletApiServer interface {
	AddNewWallet(context.Context, *AddNewWalletRequest) (*AddNewWalletResponse, error)
	GetWalletInfo(context.Context, *GetWalletInfoRequest) (*GetWalletInfoResponse, error)
	GetEnabledWallets(context.Context, *GetEnabledWalletsRequest) (*GetEnabledWalletsResponse, error)
	GetDerivationAddress(context.Context, *DerivationAddressRequest) (*DerivationAddressResponse, error)
	GetDerivationAddressByRange(context.Context, *DerivationAddressByRangeRequest) (*DerivationAddressByRangeResponse, error)
	SignTransaction(context.Context, *SignTransactionRequest) (*SignTransactionResponse, error)
	mustEmbedUnimplementedHdWalletApiServer()
}

// UnimplementedHdWalletApiServer must be embedded to have forward compatible implementations.
type UnimplementedHdWalletApiServer struct {
}

func (UnimplementedHdWalletApiServer) AddNewWallet(context.Context, *AddNewWalletRequest) (*AddNewWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewWallet not implemented")
}
func (UnimplementedHdWalletApiServer) GetWalletInfo(context.Context, *GetWalletInfoRequest) (*GetWalletInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletInfo not implemented")
}
func (UnimplementedHdWalletApiServer) GetEnabledWallets(context.Context, *GetEnabledWalletsRequest) (*GetEnabledWalletsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnabledWallets not implemented")
}
func (UnimplementedHdWalletApiServer) GetDerivationAddress(context.Context, *DerivationAddressRequest) (*DerivationAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDerivationAddress not implemented")
}
func (UnimplementedHdWalletApiServer) GetDerivationAddressByRange(context.Context, *DerivationAddressByRangeRequest) (*DerivationAddressByRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDerivationAddressByRange not implemented")
}
func (UnimplementedHdWalletApiServer) SignTransaction(context.Context, *SignTransactionRequest) (*SignTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignTransaction not implemented")
}
func (UnimplementedHdWalletApiServer) mustEmbedUnimplementedHdWalletApiServer() {}

// UnsafeHdWalletApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HdWalletApiServer will
// result in compilation errors.
type UnsafeHdWalletApiServer interface {
	mustEmbedUnimplementedHdWalletApiServer()
}

func RegisterHdWalletApiServer(s grpc.ServiceRegistrar, srv HdWalletApiServer) {
	s.RegisterService(&HdWalletApi_ServiceDesc, srv)
}

func _HdWalletApi_AddNewWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNewWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HdWalletApiServer).AddNewWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hdwallet_api.HdWalletApi/AddNewWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HdWalletApiServer).AddNewWallet(ctx, req.(*AddNewWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HdWalletApi_GetWalletInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HdWalletApiServer).GetWalletInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hdwallet_api.HdWalletApi/GetWalletInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HdWalletApiServer).GetWalletInfo(ctx, req.(*GetWalletInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HdWalletApi_GetEnabledWallets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnabledWalletsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HdWalletApiServer).GetEnabledWallets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hdwallet_api.HdWalletApi/GetEnabledWallets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HdWalletApiServer).GetEnabledWallets(ctx, req.(*GetEnabledWalletsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HdWalletApi_GetDerivationAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DerivationAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HdWalletApiServer).GetDerivationAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hdwallet_api.HdWalletApi/GetDerivationAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HdWalletApiServer).GetDerivationAddress(ctx, req.(*DerivationAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HdWalletApi_GetDerivationAddressByRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DerivationAddressByRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HdWalletApiServer).GetDerivationAddressByRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hdwallet_api.HdWalletApi/GetDerivationAddressByRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HdWalletApiServer).GetDerivationAddressByRange(ctx, req.(*DerivationAddressByRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HdWalletApi_SignTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HdWalletApiServer).SignTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hdwallet_api.HdWalletApi/SignTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HdWalletApiServer).SignTransaction(ctx, req.(*SignTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HdWalletApi_ServiceDesc is the grpc.ServiceDesc for HdWalletApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HdWalletApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hdwallet_api.HdWalletApi",
	HandlerType: (*HdWalletApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNewWallet",
			Handler:    _HdWalletApi_AddNewWallet_Handler,
		},
		{
			MethodName: "GetWalletInfo",
			Handler:    _HdWalletApi_GetWalletInfo_Handler,
		},
		{
			MethodName: "GetEnabledWallets",
			Handler:    _HdWalletApi_GetEnabledWallets_Handler,
		},
		{
			MethodName: "GetDerivationAddress",
			Handler:    _HdWalletApi_GetDerivationAddress_Handler,
		},
		{
			MethodName: "GetDerivationAddressByRange",
			Handler:    _HdWalletApi_GetDerivationAddressByRange_Handler,
		},
		{
			MethodName: "SignTransaction",
			Handler:    _HdWalletApi_SignTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hdwallet_api.proto",
}
